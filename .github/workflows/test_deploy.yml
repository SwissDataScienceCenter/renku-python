name: Test, Integration Tests and Deploy

on:
  push:
    branches:
    - '*'
    tags:
    - 'v*.*.*'

jobs:
  # docs-linux:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       python-version: [3.6, 3.7, 3.8]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install .[all]
  #       git config --global --add user.name "Renku @ SDSC"
  #       git config --global --add user.email "renku@datascience.ch"
  #   - name: Test docs
  #     run: ./run-tests.sh -d
  # test-linux:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       python-version: [3.6, 3.7, 3.8]
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #   - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install -e .[nodocs]
  #       python -m pip install coveralls
  #       python setup.py --version
  #       git config --global --add user.name "Renku @ SDSC"
  #       git config --global --add user.email "renku@datascience.ch"
  #   - name: Test with pytest
  #     run: ./run-tests.sh -s -t
  #   - name: Coveralls
  #     env:
  #       COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
  #     run: coveralls

  # test-macos:
  #   runs-on: macos-latest
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       python-version: [3.6, 3.7, 3.8]
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #   - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       brew update
  #       brew install git-lfs shellcheck node || brew link --overwrite node
  #       python -m pip install --upgrade pip
  #       python -m pip install -e .[all]
  #       git config --global --add user.name "Renku @ SDSC"
  #       git config --global --add user.email "renku@datascience.ch"
  #   - name: Test with pytest
  #     run: ./run-tests.sh

  # test-linux-integration:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       python-version: [3.6, 3.7, 3.8]
  #   needs: [test-linux]
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #   - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       python -m pip install -e .[nodocs]
  #       git config --global --add user.name "Renku @ SDSC"
  #       git config --global --add user.email "renku@datascience.ch"
  #   - name: Test with pytest
  #     env:
  #       IT_OAUTH_GIT_TOKEN: ${{ secrets.IT_OAUTH_GIT_TOKEN }}
  #     run: pytest -m integration -v

  # test-macos-integration:
  #   runs-on: macos-latest
  #   strategy:
  #     max-parallel: 4
  #     matrix:
  #       python-version: [3.6, 3.7, 3.8]
  #   needs: [test-macos]
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       fetch-depth: 0
  #   - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v1
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install dependencies
  #     run: |
  #       brew update
  #       brew install git-lfs shellcheck node || brew link --overwrite node
  #       python -m pip install --upgrade pip
  #       python -m pip install -e .[all]
  #       git config --global --add user.name "Renku @ SDSC"
  #       git config --global --add user.email "renku@datascience.ch"
  #   - name: Test with pytest
  #     env:
  #       IT_OAUTH_GIT_TOKEN: ${{ secrets.IT_OAUTH_GIT_TOKEN }}
  #     run: pytest -m integration -v

  publish-pypi:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.6]
    #needs: [docs-linux, test-linux, test-macos, test-linux-integration, test-macos-integration]
    #if: "startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
        python -m pip install -e .[all]
        git config --global --add user.name "Renku @ SDSC"
        git config --global --add user.email "renku@datascience.ch"
    - name: Tag if necessary
      if: "!startsWith(github.ref, 'refs/tags/')"
      run: |
        renku --version
        export GIT_TAG=$(renku --version)
        git tag $GIT_TAG
    - name: Build Package
      run: python setup.py sdist bdist_wheel
    - name: Publish a Python distribution to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_ACCESS_TOKEN }}
    - name: Github Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
    - name: write release URL to file
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release-url.txt
    - name: Upload release URL for other jobs
      uses: actions/upload-artifact@v1
      with:
        name: release-url
        path: release-url.txt

  publish-brew:
    runs-on: macos-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [publish-pypi]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        brew update
        brew install git-lfs shellcheck node || brew link --overwrite node
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
        python -m pip install -e .[all]
        git config --global --add user.name "Renku @ SDSC"
        git config --global --add user.email "renku@datascience.ch"
    - name: Generate bottle
      run: |
        echo PY_BREW_VERSION=$(python setup.py --version)
        make -e PY_BREW_VERSION=$(python setup.py --version) brew-commit-formula brew-build-bottle brew-commit-bottle
    - name: Download release URl file
      uses: actions/download-artifact@v1
      with:
        name: release-url
    - name: Release params to outputd
      id: get_release_url
      run: |
        echo ::set-output name=release_url::$(cat release-url.txt)
        echo ::set-output name=bottle_json::$(find . -type f -printf "%f\n" -iname "*.bottle.json"|head -n 1)
        echo ::set-output name=bottle_tar::$(find . -type f -printf "%f\n" -iname "*.bottle.tar.gz"|head -n 1)
    - name: Upload Release Asset bottle.json
      id: upload-release-asset-json-pypi
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.release_url}}
        asset_path: ./${{ steps.get_release_url.outputs.bottle_json}}
        asset_name: ${{ steps.get_release_url.outputs.bottle_json}}
        asset_content_type: application/json
    - name: Upload Release Asset bottle.tar
      id: upload-release-asset-tar-pypi
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_url.outputs.release_url}}
        asset_path: ./${{ steps.get_release_url.outputs.bottle_tar}}
        asset_name: ${{ steps.get_release_url.outputs.bottle_tar}}
        asset_content_type: application/tar+gzip
    - name: Publish renku.rb
      run: |
        git clone https://${{secrets.HOMEBREW_ACCESS_TOKEN}}@github.com/SwissDataScienceCenter/homebrew-renku/.git homebrew
        cd homebrew
        cp /usr/local/Homebrew/Library/Taps/swissdatasciencecenter/homebrew-renku/* ./
        git config --local user.email "renku@datascience.ch"
        git config --local user.name "RenkuBot"
        git add --all
        git commit -m " Deploy swissdatasciencecenter/homebrew-renku to github.com/swissdatasciencecenter/homebrew-renku.git:master"
        git push

  publish-chart:
    runs-on: ubuntu-latest
    #needs: [docs-linux, test-linux, test-macos, test-linux-integration, test-macos-integration]
    #if: "startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'"
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.7]
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel twine
        python -m pip install -e .[all]
        git config --global --add user.name "Renku @ SDSC"
        git config --global --add user.email "renku@datascience.ch"
    - name: Prepare Helm
      env:
        HELM_URL: https://storage.googleapis.com/kubernetes-helm
        HELM_TGZ: helm-v2.14.3-linux-amd64.tar.gz
        REQUIREMENTS: lowest
      run: |
        mkdir -p /tmp/helm
        wget -q ${HELM_URL}/${HELM_TGZ} -O /tmp/helm/${HELM_TGZ}
        tar -C /tmp/helm -xzv -f /tmp/helm/${HELM_TGZ}
        PATH=/tmp/helm/linux-amd64/:$PATH
        helm init --client-only
        pip install chartpress==0.3.2
    - name: Set Tag
      run: echo ::set-env name=GIT_TAG::$(renku --version)
      if: startsWith(github.ref, 'refs/tags/')
    - name: Deploy Chart
      run: |
        echo "${{secrets.HELM_CHARTS_DEPLOY_RSA_KEY}}" > deploy_rsa
        ./git-deploy-chart.sh
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME}}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD}}
